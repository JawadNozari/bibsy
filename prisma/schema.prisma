generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// the blew code is used as an example

model Staff {
  id        Int             @id @default(autoincrement())
  admin     Boolean         @default(false)
  password  String?
  firstName String?
  lastName  String?
  email     String          @unique
  phone     String          @unique @db.VarChar(13)
  image     String          @db.VarChar(255)
  history   bookHistory[]
  missing   missingBooks[]
  borrowed  borrowedBooks[]
}

model Student {
  id        Int             @id @default(autoincrement())
  password  String?
  firstName String?
  lastName  String?
  email     String          @unique
  phone     String          @unique @db.VarChar(13)
  image     String          @db.VarChar(255)
  history   bookHistory[]
  missing   missingBooks[]
  borrowed  borrowedBooks[]
}

model Book {
  id         Int             @id @default(autoincrement())
  bookImg    String          @db.VarChar(255)
  title      String?
  author     String?
  publishers String?
  published  DateTime        @default(now())
  regDate    DateTime        @default(now())
  isbn       Int
  invNr      Int
  price      Int
  available  Boolean         @default(true)
  missing    missingBooks[]
  borrowed   borrowedBooks[]
  history    bookHistory[]
}

model missingBooks {
  id        Int      @id @default(autoincrement())
  regDate   DateTime @default(now())
  note      String   @db.VarChar(255)
  Book      Book?    @relation(fields: [bookId], references: [id])
  bookId    Int?
  Staff     Staff?   @relation(fields: [staffId], references: [id])
  staffId   Int?
  Student   Student? @relation(fields: [studentId], references: [id])
  studentId Int?
}

model borrowedBooks {
  id        Int      @id @default(autoincrement())
  regDate   DateTime @default(now())
  note      String   @db.VarChar(255)
  Book      Book?    @relation(fields: [bookId], references: [id])
  bookId    Int?
  Staff     Staff?   @relation(fields: [staffId], references: [id])
  staffId   Int?
  Student   Student? @relation(fields: [studentId], references: [id])
  studentId Int?
}

model bookHistory {
  id        Int      @id @default(autoincrement())
  regDate   DateTime @default(now())
  Book      Book?    @relation(fields: [bookId], references: [id])
  bookId    Int?
  Staff     Staff?   @relation(fields: [staffId], references: [id])
  staffId   Int?
  Student   Student? @relation(fields: [studentId], references: [id])
  studentId Int?
}
