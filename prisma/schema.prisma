generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Administrative {
  id             Int     @id
  canEditLibrary Boolean
  canEditUsers   Boolean
  fullAcess      Boolean
  Users          Users   @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "administrative_id_foreign")
}

model Book {
  id              Int            @id
  bookImg         String         @db.VarChar(255)
  title           String         @db.VarChar(255)
  author          String         @db.VarChar(255)
  publisher       String         @db.VarChar(255)
  publishedDate   DateTime       @db.Date
  regDate         DateTime       @db.Date
  isbn            String         @db.VarChar(255)
  inventoryNumber Int            @unique(map: "book_inventorynumber_unique")
  price           Int
  available       Boolean
  isBorrowed      Boolean
  isMissing       Boolean
  bookHistory     bookHistory[]
  borrowedBooks   borrowedBooks?
  missingBooks    missingBooks?
}

model Users {
  id                                            Int             @id @default(autoincrement())
  firstName                                     String          @db.VarChar(255)
  lastName                                      String          @db.VarChar(255)
  username                                      String          @unique @db.VarChar(255)
  password                                      String          @db.VarChar(255)
  email                                         String          @unique @db.VarChar(255)
  phone                                         String          @unique @db.VarChar(15)
  image                                         String          @db.VarChar(255)
  qrCode                                        String          @db.VarChar(255)
  isAdmin                                       Boolean
  isStaff                                       Boolean
  isStudent                                     Boolean
  createdAt                                     DateTime        @default(now()) @db.Timestamp(6)
  Administrative                                Administrative?
  borrowedBooks_borrowedBooks_borrowedByToUsers borrowedBooks[] @relation("borrowedBooks_borrowedByToUsers")
  borrowedBooks_borrowedBooks_borrowedToToUsers borrowedBooks[] @relation("borrowedBooks_borrowedToToUsers")
  classRoom                                     classRoom?
}

model bookHistory {
  id           Int      @id
  regDate      DateTime @db.Date
  bookId       Int
  returnedDate Int
  Book         Book     @relation(fields: [bookId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "bookhistory_bookid_foreign")

  @@index([bookId], map: "bookhistory_bookid_index")
}

model borrowedBooks {
  id                                    Int      @id
  borrowedDate                          DateTime @db.Date
  note                                  String
  bookId                                Int      @unique(map: "borrowedbooks_bookid_unique")
  borrowedBy                            Int
  borrowedTo                            Int
  Book                                  Book     @relation(fields: [bookId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "borrowedbooks_bookid_foreign")
  Users_borrowedBooks_borrowedByToUsers Users    @relation("borrowedBooks_borrowedByToUsers", fields: [borrowedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "borrowedbooks_borrowedby_foreign")
  Users_borrowedBooks_borrowedToToUsers Users    @relation("borrowedBooks_borrowedToToUsers", fields: [borrowedTo], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "borrowedbooks_borrowedto_foreign")
}

model classRoom {
  id           Int            @id
  password     String         @db.VarChar(255)
  firstName    String         @db.VarChar(255)
  lastName     String         @db.VarChar(255)
  email        String         @unique(map: "classroom_email_unique") @db.VarChar(255)
  phone        String         @unique(map: "classroom_phone_unique") @db.VarChar(255)
  image        String         @db.VarChar(255)
  qrCode       String         @unique(map: "classroom_qrcode_unique") @db.VarChar(255)
  classroom    String         @db.VarChar(255)
  Users        Users          @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "classroom_id_foreign")
  missingBooks missingBooks[]
}

model missingBooks {
  id        Int       @id
  regDate   DateTime  @db.Date
  note      String
  staffId   Int
  studentId Int
  bookId    Int       @unique(map: "missingbooks_bookid_unique")
  Book      Book      @relation(fields: [bookId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "missingbooks_bookid_foreign")
  classRoom classRoom @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "missingbooks_studentid_foreign")
}
